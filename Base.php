<?php
    class BaseModule extends IPSModule
    { 
        public function Create()
        {
            //Never delete this line!
            parent::Create();
        }
        public function ApplyChanges()
        {
            //Never delete this line!
            parent::ApplyChanges();
        }
         
        /**
         * Set Value
         * @param integer $ID
         * @param type $Value
         */        
        protected function SetValue($ID, $Value)
        {
            if ( GetValue($ID) !== $Value ) { SetValue($ID, $Value); }
        }
        
        /**
         * Register Event Cyclic
         * @param string $Ident
         * @param string $Name
         * @param integer $DateType
         * @param integer $DateInterval
         * @param integer $DateDays
         * @param integer $DateDaysInterval
         * @param integer $TimeTyp
         * @param integer $TimeInterval
         * @param string $Content
         * @param integer $Position
         * @return integer ID
         */
        protected function RegisterEventCyclic($Ident, $Name, $DateType, $DateInterval, $DateDays, $DateDaysInterval, $TimeTyp, $TimeInterval, $Content = "<?\n\n//Autogenerated script\n\n?>", $Position = 0)
        {
            //search for already available events with proper ident
            $eid = @IPS_GetObjectIDByIdent($Ident, $this->InstanceID);
            
            //properly update eventID
            if ( $eid === false)
            {
                $eid = 0;
            }
            
            //we need to create one
            if ( $eid === 0 )
            {
                $eid = IPS_CreateEvent(1);
            }
            
            //configure it
            IPS_SetParent($eid, $this->InstanceID);
            IPS_SetIdent($eid, $Ident);
            IPS_SetName($eid, $Name);
            IPS_SetPosition($eid, $Position);
            IPS_SetHidden($eid, true);
            //IPS_SetReadOnly($eid, true);
            	
            IPS_SetEventCyclic($eid, $DateType, $DateInterval, $DateDays, $DateDaysInterval, $TimeTyp, $TimeInterval);      
            IPS_SetEventScript($eid, $Content);
            IPS_SetEventActive($eid, true);
            			
            return $eid;				
        }
        
        /**
         * Unregister Event
         * @param string $Ident
         */
        protected function UnregisterEvent($Ident)
        {
            //search for already available events with proper ident
            $eid = @IPS_GetObjectIDByIdent($Ident, $this->InstanceID);
            
            if(IPS_EventExists($eid)) 
            { 
                IPS_SetEventActive($eid, false);
                IPS_DeleteEvent($eid);
            }            
        }  
        
        /**
         * Register Variable By Parent
         * @param integer $ParentID
         * @param string $Ident
         * @param string $Name
         * @param integer $Type
         * @param string $Profile
         * @param integer $Position
         * @return integer ID
         * @throws Exception
         */
        protected function RegisterVariableByParent($ParentID, $Ident, $Name, $Type, $Profile = "", $Position = 0) 
        {
            if($Profile !== "") 
            {
                //prefer system profiles
		if(IPS_VariableProfileExists("~".$Profile)) 
                {
                    $Profile = "~".$Profile;
		}
		if(!IPS_VariableProfileExists($Profile)) 
                {
                    throw new Exception("Profile with name ".$Profile." does not exist");
		}
            }
            //search for already available variables with proper ident
            $vid = @IPS_GetObjectIDByIdent($Ident, $ParentID);
            //properly update variableID
            if($vid === false) { $vid = 0; }
            //we have a variable with the proper ident. check if it fits
            if($vid > 0) 
            {
                //check if we really have a variable
                if(!IPS_VariableExists($vid)) { throw new Exception("Ident with name ".$Ident." is used for wrong object type"); } //bail out
		//check for type mismatch
		if(IPS_GetVariable($vid)["VariableType"] != $Type) 
                {
                    //mismatch detected. delete this one. we will create a new below
                    IPS_DeleteVariable($vid);
                    //this will ensure, that a new one is created
                    $vid = 0;
		}
            }
            //we need to create one
            if($vid === 0)
            {
                $vid = IPS_CreateVariable($Type);
		//configure it
		IPS_SetParent($vid, $ParentID);
		IPS_SetIdent($vid, $Ident);
		IPS_SetName($vid, $Name);
		IPS_SetPosition($vid, $Position);
		//IPS_SetReadOnly($vid, true);
            }
            //update variable profile. profiles may be changed in module development.
            //this update does not affect any custom profile choices
            IPS_SetVariableCustomProfile($vid, $Profile);
            return $vid;
	}

        protected function CreateIntegerProfile($ProfileName, $Icon, $Präfix, $Suffix, $MinValue, $MaxValue, $StepSize)
        {
            $Profile = IPS_VariableProfileExists($ProfileName);
            if ($Profile === false)
            {
                IPS_CreateVariableProfile($ProfileName, 1);
                IPS_SetVariableProfileIcon($ProfileName,  $Icon);
                IPS_SetVariableProfileText($ProfileName, $Präfix, $Suffix);
                IPS_SetVariableProfileValues($ProfileName, $MinValue, $MaxValue, $StepSize);
            }
        }         
        
        protected function CreateFloatProfile($ProfileName, $Icon, $Präfix, $Suffix, $MinValue, $MaxValue, $StepSize, $Digits)
        {
            $Profile = IPS_VariableProfileExists($ProfileName);
            if ($Profile === false)
            {
                IPS_CreateVariableProfile($ProfileName, 2);
                IPS_SetVariableProfileIcon($ProfileName,  $Icon);
                IPS_SetVariableProfileText($ProfileName, $Präfix, $Suffix);
                IPS_SetVariableProfileValues($ProfileName, $MinValue, $MaxValue, $StepSize);
                IPS_SetVariableProfileDigits($ProfileName, $Digits);
            }
        } 
        
        protected function CreateStringProfile($ProfileName, $Icon, $Präfix, $Suffix)
        {
            $Profile = IPS_VariableProfileExists($ProfileName);
            if ($Profile === false)
            {
                IPS_CreateVariableProfile($ProfileName, 3);
                IPS_SetVariableProfileIcon($ProfileName,  $Icon);
                IPS_SetVariableProfileText($ProfileName, $Präfix, $Suffix);
            }
        }        
        
 	protected function RegisterHook($Hook, $TargetID)
	{
            $ids = IPS_GetInstanceListByModuleID("{015A6EB8-D6E5-4B93-B496-0D3F77AE9FE1}");
            if(sizeof($ids) > 0) {
                $hooks = json_decode(IPS_GetProperty($ids[0], "Hooks"), true);
		$found = false;
		foreach($hooks as $index => $hook) 
                {
                    if($hook['Hook'] == $Hook) 
                    {
                    	if($hook['TargetID'] == $TargetID) return;
			$hooks[$index]['TargetID'] = $TargetID;
			$found = true;
                    }
		}
		if(!$found) 
                {
                    $hooks[] = Array("Hook" => $Hook, "TargetID" => $TargetID);
		}
		IPS_SetProperty($ids[0], "Hooks", json_encode($hooks));
		IPS_ApplyChanges($ids[0]);
            }
	}       
    }  